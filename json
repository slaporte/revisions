#!/data/project/revisionstats/revisionstats/bin/python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
import time
import os
import oursql
import cgitb
import json
import cgi
cgitb.enable()

DB_PATH = os.path.expanduser("~/replica.my.cnf")

# TODO: timestamp

ALL_PROPS = ["rev_sha1", "rev_len", "rev_text_id", "rev_timestamp", "rev_minor_edit", "rev_user_text", "rev_comment", "rev_parent_id", "rev_deleted", "rev_page", "rev_user", "rev_id"]

DESIRED_PROPS = ["rev_sha1", "rev_len", "rev_timestamp", "rev_minor_edit", "rev_user_text", "rev_comment", "rev_deleted", "rev_user", "rev_id"]


class ArticleHistory(object):
    '''article history object'''
    def __init__(self, title, namespace=0):
        try:
            s_time = time.time()
            db = oursql.connect(db='enwiki_p',
                                host="enwiki.labsdb",
                                read_default_file=DB_PATH)
        except oursql.ProgrammingError as (error_number, error_str, donno):
            print str(error_number) + ':  ' + error_str
            self.revisions = {'error': error_str}
            self.dur = time.time() - s_time
        except:
            raise
        else:
            cursor = db.cursor(oursql.DictCursor)
            cursor.execute(u'''
                SELECT      {}
                FROM        revision
                INNER JOIN  page ON revision.rev_page = page.page_id
                WHERE       page_title = ? AND page.page_namespace = ?;
                '''.format(', '.join(DESIRED_PROPS)), (title, namespace))
            self.revisions = cursor.fetchall()
            self.dur = time.time() - s_time


class WL(object):
    '''article history object'''
    def __init__(self, title, namespace=0):
        try:
            s_time = time.time()
            db = oursql.connect(db='enwiki_p',
                                host="enwiki.labsdb",
                                read_default_file=DB_PATH)
            cursor = db.cursor(oursql.DictCursor)
        except oursql.ProgrammingError as (error_number, error_str, donno):
            print str(error_number) + ':  ' + error_str
            self.revisions = {'error': error_str}
            self.dur = time.time() - s_time
        except:
            raise
        else:
            cursor.execute(u'''
                SELECT      count(ts_wl_user_touched_cropped)
                FROM        watchlist
                WHERE       wl_title = ? AND wl_namespace = ?;
                ''', (title, namespace))
            self.wers = cursor.fetchall()
            self.dur = time.time() - s_time


def get_revisions(title):
    article = ArticleHistory(title)
    return {'result': article.revisions}


def get_everything(title):
    talk = ArticleHistory(title, 1)
    article = ArticleHistory(title)
    return json.dumps({'article': article.revisions, 'article_time': str(article.dur), 'talk': talk.revisions, 'talk_time': str(talk.dur)})


def get_wl(title):
    w = WL(title)
    return {'watchers': w.wers[0]['count(ts_wl_user_touched_cropped)'], 'query_duration': str(w.dur)}


def get_uptime():
    import subprocess
    import socket
    import os
    uptime, _, load = subprocess.check_output(['uptime']).partition(',  load average:')
    return {'uptime': uptime.strip(), 'load': load.strip(), 'hostname': socket.gethostname(), 'uname': os.uname()}

if __name__ == '__main__':
    get_params = cgi.FieldStorage()
    page_title = get_params.getfirst('title')
    print "Content-Type: text/html\r\n\r\n"
    if not page_title:
        print get_uptime()
    else:
        print get_everything(page_title)

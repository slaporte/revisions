#!/data/project/revisionstats/revisionstats/bin/python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
from bottle import template
import json
from datetime import timedelta, datetime
import os
import oursql
import cgitb
import cgi
cgitb.enable()

# TODO: timestamp

DB_PATH = os.path.expanduser("~/replica.my.cnf")


def parse_date_string(stamp):
    return datetime.strptime(stamp, '%Y%m%d%H%M%S')


class HistoryError(Exception):
    pass


def mean(vals):
    return sum(vals) / len(vals)


def median(vals):
    copy = sorted(vals)
    size = len(vals)
    if size % 2 == 1:
        return copy[(size - 1) / 2]
    else:
        return (copy[size / 2 - 1] + copy[size / 2]) / 2


def pow_diff(vals, power):
    m = mean(vals)
    return [(v - m) ** power for v in vals]


def variance(vals):
    return mean(pow_diff(vals, 2))


def std_dev(vals):
    return variance(vals) ** 0.5


def rel_std_dev(vals):
    return std_dev(vals) / mean(vals)


def skewness(vals):
    return (sum(pow_diff(vals, 3)) /
            ((len(vals) - 1) * (std_dev(vals) ** 3)))


def kurtosis(vals):
    return (sum(pow_diff(vals, 4)) /
            ((len(vals) - 1) * (std_dev(vals) ** 4)))


def num_stats(vals):
    return {
        'mean':     mean(vals),
        'median':   median(vals),
        'variance': variance(vals),
        'std_dev':  std_dev(vals),
        'rel_std_dev':  rel_std_dev(vals),
        'skewness': skewness(vals),
        'kurtosis': kurtosis(vals),
        'size': len(vals)
    }


class ArticleHistory(object):
    '''article history object'''
    def __init__(self, title, namespace=0):
        db = oursql.connect(db='enwiki_p',
                            host="enwiki.labsdb",
                            read_default_file=DB_PATH,
                            charset=None,
                            use_unicode=False)
        cursor = db.cursor(oursql.DictCursor)
        cursor.execute('''
            SELECT      revision.rev_user_text, revision.rev_timestamp, revision.rev_user,
                        revision.rev_minor_edit, revision.rev_len, revision.rev_deleted,
                            revision.rev_comment, page.page_id, page.page_title
            FROM        revision
            INNER JOIN  page ON revision.rev_page = page.page_id
            WHERE       page_title = ? AND page.page_namespace = ?;
            ''', (title, namespace))
        self.revisions = cursor.fetchall()
        self.time_2 = datetime.now()
        self.title = title
        self.first_edit_date = parse_date_string(self.revisions[0]['rev_timestamp'])
        self.age = datetime.now() - self.first_edit_date
        self.most_recent_edit_date = parse_date_string(self.revisions[-1]['rev_timestamp'])
        self.most_recent_edit_age = datetime.now() - self.most_recent_edit_date

    def get_by_period(self, year, month=0):
        by_period = []
        if month == 0:
            for rev in self.revisions:
                if rev['rev_timestamp'][:4] == str(year):
                    by_period.append(rev)
        else:
            for rev in self.revisions:
                if rev['rev_timestamp'][:6] == str(year) + str(month).zfill(2):
                    by_period.append(rev)
        return by_period

    def get_since(self, day_limit):
        recent_revs = []
        threshold = datetime.now() - timedelta(days=day_limit)
        for rev in self.revisions:
            if parse_date_string(rev['rev_timestamp']) > threshold:
                recent_revs.append(rev)
        return recent_revs

    def get_average_time_between_edits(self, revisions=None):
        times = []
        if revisions is None:
            revisions = self.revisions
        for rev in revisions:
            times.append(parse_date_string(rev['rev_timestamp']))
        time_diffs = []
        for i, time in enumerate(times):
            if time == times[0]:
                continue
            else:
                time_diffs.append(time - times[i - 1])
        if len(time_diffs) != 0:
            average = sum(time_diffs, timedelta(0)) / len(time_diffs)
            return [d.total_seconds() for d in time_diffs]
        else:
            return [0]

    def get_edits_per_day(self, revisions=None):
        times = []
        if revisions is None:
            revisions = self.revisions
        for rev in revisions:
            times.append(parse_date_string(rev['rev_timestamp']))
        time_diffs = []
        for i, time in enumerate(times):
            if time == times[0]:
                continue
            else:
                time_diffs.append(time - times[i - 1])
        if len(time_diffs) != 0:
            return num_stats(time_diffs)
        else:
            return 0

    def get_average_length(self, revisions=None):
        if revisions is None:
            revisions = self.revisions
        if len(revisions) != 0:
            return [int(rev['rev_len']) for rev in revisions if rev['rev_len']]
        return [0]

    def get_revert_estimate(self, revisions=None):
        reverts = 0
        if revisions is None:
            revisions = self.revisions
        for rev in revisions:
            if rev['rev_comment'] and 'revert' in rev['rev_comment'].lower():
                reverts += 1
        return reverts

    def get_revision_total(self, revisions=None):
        if revisions is None:
            revisions = self.revisions
        return len(revisions)

    def get_minor_count(self, revisions=None):
        if revisions is None:
            revisions = self.revisions
        return int(sum([rev['rev_minor_edit'] for rev in revisions]))

    def get_anon_count(self, revisions=None):
        anon_count = 0
        if revisions is None:
            revisions = self.revisions
        for rev in revisions:
            if rev['rev_user'] == 0:
                    anon_count += 1
        return anon_count

    def get_editor_counts(self, revisions=None):
        authors = {}
        if revisions is None:
            revisions = self.revisions
        for rev in revisions:
            user = rev['rev_user_text']
            try:
                authors[user] += 1
            except KeyError:
                authors[user] = 1
        return authors

    def get_editor_bytes(self, revisions=None):
        authors = {}
        if revisions is None:
            revisions = self.revisions
        for rev in revisions:
            user = rev['rev_user_text']
            try:
                authors[user].append(rev['rev_len'])
            except KeyError:
                authors[user] = [rev['rev_len']]
        return authors

    def get_some_editors(self, num, revisions=None):
        if revisions is None:
            revisions = self.revisions
        authors = self.get_editor_counts(revisions)
        return dict([(a, c) for (a, c) in authors.items() if c > num])

    def get_top_editors(self, revisions=None):
        if revisions is None:
            revisions = self.revisions
        authors = self.get_editor_counts(revisions)
        return sorted(authors.iteritems(), key=lambda (k, v): v, reverse=True)

    def get_top_percent_editors(self, top=.20, revisions=None):
        if revisions is None:
            revisions = self.revisions
        editors = self.get_editor_counts(revisions)
        if(len(editors)) != 0:
            threshold = int(round(len(editors) * top))
            top_editors = self.get_top_editors(revisions)[:threshold]
            total = sum([v for (k, v) in top_editors], 0)
            return total / float(self.get_revision_total(revisions))
        else:
            return 0

    def get_editor_count(self, revisions=None):
        if revisions is None:
            revisions = self.revisions
        return len(self.get_editor_counts(revisions))

    def get_stats(self):
        edit_interval = self.get_average_time_between_edits()
        length = self.get_average_length()
        stats = {'title':                       self.title,
            'total_revisions':              self.get_revision_total(),
            'minor_count':                  self.get_minor_count(),
            'IP_edit_count':                self.get_anon_count(),
            'first_edit':                   str(self.first_edit_date),
            'most_recent_edit':             str(self.most_recent_edit_date),
            'edit_interval_avg':            str(sum(edit_interval) / (len(edit_interval) + 0.0)),
            'edit_interval_list':           json.dumps(edit_interval),
            'age':                          str(self.age),
            'recent_edit_age':              str(self.most_recent_edit_age),
            'editors_five_plus_edits':      len(self.get_some_editors(5)),
            'total_editors':                self.get_editor_count(),
            'avg_length':                   str(sum(length) / (len(length) + 0.0)),
            'length_list':                  json.dumps(length),
            'reverts_estimate':             self.get_revert_estimate(),
            'last_day':                     self.get_revision_total(self.get_since(1)),
            'last_7_days':                  self.get_revision_total(self.get_since(7)),
            'last_30_days':                 self.get_revision_total(self.get_since(30)),
            'last_365_days':                self.get_revision_total(self.get_since(365)),
            'top_5_percent':                self.get_top_percent_editors(.05),
            'top_20_percent':                self.get_top_percent_editors(.20),
            'top_50_percent':                self.get_top_percent_editors(.50)
            }
        return stats

    def get_rev_stats(self):
        first_year = self.revisions[0]['rev_timestamp'][:4]
        first_month = self.revisions[0]['rev_timestamp'][4:6]
        last_year = self.revisions[-1]['rev_timestamp'][:4]
        last_month = self.revisions[-1]['rev_timestamp'][4:6]

        monthly = []
        for y in range(int(first_year), int(last_year) + 1):
            if y == int(first_year):
                start_m = first_month
            else:
                start_m = 1
            if y == int(last_year):
                end_m = last_month
            else:
                end_m = 13
            for m in range(int(start_m), int(end_m)):
                revs = self.get_by_period(y, m)
                label = str(y) + str(m).zfill(2) + str(1).zfill(2)
                monthly.append({'date': label,
                            'Total': self.get_revision_total(revs),
                            'Minor': self.get_minor_count(revs),
                            'IP': self.get_anon_count(revs),
                            'Reverts (estimate)': self.get_revert_estimate(revs)})
        return monthly


def get_history(title):
    '''first, normalize article title'''
    article = ArticleHistory(title)
    stats = article.get_stats()
    stats['title_norm']  = title.replace('_', ' ')
    stats['monthly']     = json.dumps(article.get_rev_stats())
    stats['top_editors'] = article.get_top_editors()[:50]
    return template('en', stats)


def get_graph(title):
    '''first, normalize article title'''
    if not title[0].isupper():
        title = title.capitalize()
    title = title.replace('%20', '_')
    title = title.replace(' ', '_')
    article = ArticleHistory(title)
    stats = {}
    stats['interval']    = []
    stats['length']      = []
    stats['editors']     = []
    stats['first_year']  = article.revisions[0]['rev_timestamp'][:4]
    stats['first_month'] = article.revisions[0]['rev_timestamp'][4:6]
    stats['last_year']   = article.revisions[-1]['rev_timestamp'][:4]
    stats['last_month']  = article.revisions[-1]['rev_timestamp'][4:6]

    stats['by_month'] = []
    for y in range(int(stats['first_year']), int(stats['last_year']) + 1):
        if y == int(stats['first_year']):
            start = stats['first_month']
        else:
            start = 1
        if y == int(stats['last_year']):
            end = stats['last_month']
        else:
            end = 13
        for m in range(int(start), int(end)):
            revs = article.get_by_period(y, m)
            label = str(y) + str(m).zfill(2) + str(1).zfill(2)
            stats['by_month'].append({'date': label,
                        'Total': article.get_revision_total(revs),
                        'Minor': article.get_minor_count(revs),
                        'IP': article.get_anon_count(revs),
                        'Reverts (estimate)': article.get_revert_estimate(revs)})
            stats['interval'].append(article.get_average_time_between_edits(revs)['mean'])
            stats['length'].append(article.get_average_length(revs)['mean'])
            stats['editors'].append(article.get_editor_count(revs))
    return template('graph', stats)


def index():
    return template('home')

if __name__ == '__main__':
    get_params = cgi.FieldStorage()
    page_title = get_params.getfirst('title')
    print "Content-Type: text/html\r\n\r\n"
    if not page_title:
        print index()
    else:
        print get_history(page_title)
